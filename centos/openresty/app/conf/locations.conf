location @lua {
    default_type text/html;
    content_by_lua_file site/bootstrap.lua;
}

#location @sass {
#    content_by_lua_file libs/resty/sass/autocompile.lua;
#}

location / {
    try_files $uri @lua;
}

# A lua_shared_dict named cache_ngx is required by test:bench_run
#lua_shared_dict cache_ngx 100k;

location /test {
    content_by_lua_file site/unit/test_example.lua;
}

location /test_mysql {
    content_by_lua_file site/app/mysql_test.lua;
    }

location /test_echo {
    # 只允许本机访问
    allow 127.0.0.1;
    deny all;

    set $first "hello";
    echo "${first} world, 测试!~";
    # http://xx/test_echo?a=1&b=3
    echo "uri = $uri";
    echo "request_uri = $request_uri";
    echo "method: $request_method";

    # http://xx/test_echo?name=hello%20world&class=3
    # 模拟post, curl -i -d 'name=xx' 'http://localhost:6699/test_echo'
    echo "name: $arg_name";
    echo "class: $arg_class";
    echo "post param: ";
    set_unescape_uri $name $arg_name;
    echo "unescape name: $name";
}

location = /sum {
    # 只允许内部调用
    internal;

    # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
    # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
    content_by_lua_block {
        local args = ngx.req.get_uri_args()
        ngx.say(tonumber(args.a) + tonumber(args.b))
    }
}

location = /app/test {
    content_by_lua_block {
        local res = ngx.location.capture(
                        "/sum", {args={a=3, b=8}}
                        )
        ngx.say("status:", res.status, " response:", res.body)
    }
}

#location ~ ^/css/.*\.css(\.map)?$ {
#    rewrite_by_lua_file libs/resty/sass/autoreload.lua;
#    try_files $uri @sass;
#}

location /js/ {
    try_files $uri =404;
}

location /img/ {
    proxy_cache my_cache;
    proxy_cache_revalidate on;
    proxy_cache_min_uses 3;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_lock on;
    try_files $uri =404;
}

location /fonts/ {
    proxy_cache my_cache;
    proxy_cache_revalidate on;
    proxy_cache_min_uses 3;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_lock on;
    try_files $uri =404;
}

# include gate.conf;

